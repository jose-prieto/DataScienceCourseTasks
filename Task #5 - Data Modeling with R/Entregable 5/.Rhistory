df = read.csv("C:\\Users\\jap25\\OneDrive\\Documentos\\git workspace\\DataScienceCourseTasks\\Task #5 - Data Modeling with R\\Entregable 5\\fundamentals.csv", sep=",", header=TRUE)
dim(df)
head(df)
library(janitor)
df = clean_names(df)
head(df)
df$period_ending <- as.Date(df$period_ending, format = "%Y-%m-%d")
string_columns <- sapply(df, is.character)
df[string_columns] <- lapply(df[string_columns], function(col) {
col <- trimws(col) # Elimina espacios al inicio y al final
col <- tolower(col) # Convierte a minúsculas
return(col)
})
str(df)
print(colSums(is.na(df)))
df$beneficioNeto <- df$net_income / df$total_revenue
head(df)
print(colSums(is.na(df)))
hist(df$beneficioNeto, freq = TRUE)
min_val <- min(df$beneficioNeto)
max_val <- max(df$beneficioNeto)
df$beneficioNeto <- (df$beneficioNeto - min_val) / (max_val - min_val)
hist(df$beneficioNeto, freq = TRUE)
print(colSums(is.na(df)))
trvaltest <- function(dat,prop = c(0.6,0.2,0.2)){
nrw = nrow(dat) #Define la cantidad de filas
trnr = as.integer(nrw *prop[1]) #Obtiene la fila que se encuentra en el 60% de la data
vlnr = as.integer(nrw*prop[2]) #Obtiene la fila que se encuentra en el 20% del restante de la data
set.seed(123) #Crea la semilla para crear números aleatorios
trni = sample(1:nrow(dat),trnr) #Crea vector con índices que conformará el set de datos de entrenamiento
trndata = dat[trni,] #Crea el Dataframe de entrenamiento
rmng = dat[-trni,] # Crea nuevo datafram con todos los índices menos los elegidos para trni
vlni = sample(1:nrow(rmng),vlnr) #Define los índices para el dataframe de validación y prueba
valdata = rmng[vlni,] #Crea Dataframe de validación con los índices de vlni
tstdata = rmng[-vlni,] ##Crea Dataframe de validación con los índices que no están en vlni
mylist = list("trn" = trndata,"val"= valdata,"tst" = tstdata) #Crea una lista de dataframes con los 3 creados.
return(mylist)
}
outdata = trvaltest(df,prop = c(0.6,0.2,0.2))
df_train = outdata$trn; df_val = outdata$val; df_test = outdata$tst
head(df_train)
head(df_train)
head(df_val)
head(df_test)
library(dplyr)
y_train_orig =  select(df_train, beneficioNeto)
y_val_orig = select(df_val, beneficioNeto)
y_test_orig = select(df_test, beneficioNeto)
y_train = log1p(y_train_orig)
y_val = log1p(y_val_orig)
y_test = log1p(y_test_orig)
print(colSums(is.na(y_train)))
hist(y_train$beneficioNeto, freq = TRUE)
print(colSums(is.na(y_val)))
hist(y_val$beneficioNeto, freq = TRUE)
print(colSums(is.na(y_test)))
hist(y_test$beneficioNeto, freq = TRUE)
df_train <- df_train[ ,!colnames(df_train)=="beneficioNeto"]
df_val <- df_val[ ,!colnames(df_val)=="beneficioNeto"]
df_test <- df_test[ ,!colnames(df_test)=="beneficioNeto"]
head(df_train)
head(df_val)
head(df_test)
train_linear_regression = function(X,y){
one = as.vector(rep(1, dim(X)[1]))
X = cbind(ones, X)
XTX = t(X) %*% X
XTX_inv = solve(XTX)
w = XTX_inv %*% t(X) %*% y
w
}
df = read.csv("C:\\Users\\jap25\\OneDrive\\Documentos\\git workspace\\DataScienceCourseTasks\\Task #5 - Data Modeling with R\\Entregable 5\\fundamentals.csv", sep=",", header=TRUE)
dim(df)
head(df)
library(janitor)
df = clean_names(df)
head(df)
df$period_ending <- as.Date(df$period_ending, format = "%Y-%m-%d")
string_columns <- sapply(df, is.character)
df[string_columns] <- lapply(df[string_columns], function(col) {
col <- trimws(col) # Elimina espacios al inicio y al final
col <- tolower(col) # Convierte a minúsculas
return(col)
})
str(df)
print(colSums(is.na(df)))
df$beneficioNeto <- df$net_income / df$total_revenue
head(df)
print(colSums(is.na(df)))
hist(df$beneficioNeto, freq = TRUE)
min_val <- min(df$beneficioNeto)
max_val <- max(df$beneficioNeto)
df$beneficioNeto <- (df$beneficioNeto - min_val) / (max_val - min_val)
hist(df$beneficioNeto, freq = TRUE)
print(colSums(is.na(df)))
trvaltest <- function(dat,prop = c(0.6,0.2,0.2)){
nrw = nrow(dat) #Define la cantidad de filas
trnr = as.integer(nrw *prop[1]) #Obtiene la fila que se encuentra en el 60% de la data
vlnr = as.integer(nrw*prop[2]) #Obtiene la fila que se encuentra en el 20% del restante de la data
set.seed(123) #Crea la semilla para crear números aleatorios
trni = sample(1:nrow(dat),trnr) #Crea vector con índices que conformará el set de datos de entrenamiento
trndata = dat[trni,] #Crea el Dataframe de entrenamiento
rmng = dat[-trni,] # Crea nuevo datafram con todos los índices menos los elegidos para trni
vlni = sample(1:nrow(rmng),vlnr) #Define los índices para el dataframe de validación y prueba
valdata = rmng[vlni,] #Crea Dataframe de validación con los índices de vlni
tstdata = rmng[-vlni,] ##Crea Dataframe de validación con los índices que no están en vlni
mylist = list("trn" = trndata,"val"= valdata,"tst" = tstdata) #Crea una lista de dataframes con los 3 creados.
return(mylist)
}
outdata = trvaltest(df,prop = c(0.6,0.2,0.2))
df_train = outdata$trn; df_val = outdata$val; df_test = outdata$tst
head(df_train)
head(df_train)
head(df_val)
head(df_test)
library(dplyr)
y_train_orig =  select(df_train, beneficioNeto)
y_val_orig = select(df_val, beneficioNeto)
y_test_orig = select(df_test, beneficioNeto)
y_train = log1p(y_train_orig)
y_val = log1p(y_val_orig)
y_test = log1p(y_test_orig)
print(colSums(is.na(y_train)))
hist(y_train$beneficioNeto, freq = TRUE)
print(colSums(is.na(y_val)))
hist(y_val$beneficioNeto, freq = TRUE)
print(colSums(is.na(y_test)))
hist(y_test$beneficioNeto, freq = TRUE)
df_train <- df_train[ ,!colnames(df_train)=="beneficioNeto"]
df_val <- df_val[ ,!colnames(df_val)=="beneficioNeto"]
df_test <- df_test[ ,!colnames(df_test)=="beneficioNeto"]
head(df_train)
head(df_val)
head(df_test)
train_linear_regression = function(X,y){
one = as.vector(rep(1, dim(X)[1]))
X = cbind(ones, X)
XTX = t(X) %*% X
XTX_inv = solve(XTX)
w = XTX_inv %*% t(X) %*% y
w
}
